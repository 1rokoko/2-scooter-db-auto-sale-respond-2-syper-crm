version: "3.9"

services:
  mysql:
    image: mysql:8.4
    container_name: rental_mysql
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password --mysqlx=0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./seed/sql:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    networks:
      - backend

  wordpress:
    image: wordpress:6.6.2-apache
    container_name: rental_wordpress
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    env_file:
      - .env
    environment:
      WORDPRESS_DB_HOST: mysql:3306
      WORDPRESS_DB_USER: ${MYSQL_USER}
      WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
      WORDPRESS_DB_NAME: ${MYSQL_DATABASE}
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_SITEURL', getenv_docker('WP_SITE_URL', 'http://localhost:8080'));
        define('WP_HOME', getenv_docker('WP_SITE_URL', 'http://localhost:8080'));
        define('WP_DEBUG', true);
        define('WP_DEBUG_LOG', true);
    volumes:
      - wordpress_data:/var/www/html
      - ./wordpress/plugins:/var/www/html/wp-content/plugins
      - ./wordpress/themes:/var/www/html/wp-content/themes
      - ./wordpress/uploads:/var/www/html/wp-content/uploads
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/wp-login.php"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  wpcli:
    image: wordpress:cli-php8.2
    container_name: rental_wpcli
    depends_on:
      mysql:
        condition: service_healthy
      wordpress:
        condition: service_healthy
    entrypoint: ["wp"]
    command: ["--info"]
    env_file:
      - .env
    environment:
      WORDPRESS_DB_HOST: mysql:3306
      WORDPRESS_DB_USER: ${MYSQL_USER}
      WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
      WORDPRESS_DB_NAME: ${MYSQL_DATABASE}
    volumes:
      - wordpress_data:/var/www/html
    networks:
      - backend

  phpmyadmin:
    image: phpmyadmin:5.2
    container_name: rental_phpmyadmin
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      PMA_HOST: mysql
      PMA_USER: ${MYSQL_USER}
      PMA_PASSWORD: ${MYSQL_PASSWORD}
      UPLOAD_LIMIT: 256M
    ports:
      - "8081:80"
    networks:
      - backend
      - frontend

  webhook:
    build:
      context: ./webhook
      dockerfile: Dockerfile
    container_name: rental_webhook
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    env_file:
      - .env
    environment:
      PORT: ${WEBHOOK_PORT}
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
    ports:
      - "${WEBHOOK_PORT:-8090}:8090"
    volumes:
      - ./webhook/src:/app/src:ro
      - ./webhook/package.json:/app/package.json:ro
      - ./webhook/package-lock.json:/app/package-lock.json:ro
    networks:
      - backend
      - frontend

  scheduler:
    image: node:20-alpine
    container_name: rental_scheduler
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    env_file:
      - .env
    working_dir: /app
    volumes:
      - ./scheduler:/app
    entrypoint: ["node", "index.js"]
    networks:
      - backend

  reverse-proxy:
    image: nginx:1.27-alpine
    container_name: rental_reverse_proxy
    restart: unless-stopped
    depends_on:
      wordpress:
        condition: service_healthy
      webhook:
        condition: service_started
    ports:
      - "8080:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - frontend
      - backend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mysql_data:
  wordpress_data:
